import { ForbiddenException, Injectable } from '@nestjs/common';
import { CompanyCustomerEntity } from 'src/entities/CompanyCustomer.entity';
import { RewardEntity } from 'src/entities/Reward.entity';
import { RewardClaimedEntity } from 'src/entities/RewardClaimed.entity';
import { StoreSettingEntity } from 'src/entities/StoreSetting.entity';
import TextMessage from 'src/shared/utils/Message';
import { Like } from 'typeorm';
import { ClaimARewardDto } from './dto/ClaimAReward.dto';
import { NewRewardDto } from './dto/NewReward.dto';

@Injectable()
export class RewardService {
    async newReward(storeId: number, body: NewRewardDto) {
        let reward = body as RewardEntity;
        reward.storeId = storeId;
        return await RewardEntity.save(reward);
    }

    async getRewards(search: string, storeId: number) {
        const rewards = await RewardEntity.find({
            where: { storeId: storeId, name: Like(`%${search}%`) },
            order: { pointRequired: 'ASC' }
        })
        return rewards
    }

    async deleteReward(id: number) {
        return await RewardEntity.delete(id);
    }

    async rewardClaim(rewardId: number) {
        return await RewardClaimedEntity
            .find({
                where: { reward: { id: rewardId } },
                relations: ['reward', 'companyCustomer', 'companyCustomer.customer']
            })

    }

    async claimAReward(body: ClaimARewardDto, companyId: number, storeId: number) {
        const { rewardId, customerId } = body;
        const reward = await RewardEntity.findOneBy({ id: rewardId });

        const companyCustomer = await CompanyCustomerEntity.findOne({ where: { customerId, companyId } });

        if (reward && companyCustomer) {
            const claimReward = new RewardClaimedEntity()
            claimReward.claimDate = new Date();
            claimReward.companyCustomer = companyCustomer;
            claimReward.reward = reward;

            companyCustomer.totalPoint > reward.pointRequired
                ? companyCustomer.totalPoint -= reward.pointRequired
                : companyCustomer.totalPoint = 0;
            companyCustomer.save();

            const claim = await RewardClaimedEntity.save(claimReward);

            const storeSetting = await StoreSettingEntity.findOne({ where: { storeId }, relations: ['store'] });
            if (storeSetting && storeSetting.sendClaimedMessage) {
                const textMessage = new TextMessage()
                if (storeSetting.autoGeneratedClaimedMessage) {
                    await textMessage.sendToCustomerId(companyCustomer.customerId, 'You\'re just got rewarded ' + reward.name + ' at ' + storeSetting.store.name);
                } else {
                    await textMessage.sendToCustomerId(companyCustomer.customerId, storeSetting.customClaimedMessage);
                }
            }
            return claim;
        } else {
            throw new ForbiddenException('Wrong credentials provided');
        }


    }
}
